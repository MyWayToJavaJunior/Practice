{"version":3,"sources":["../src/index.js"],"names":["pairs","isList","mix","isPair","cdr","checkList","list","value","toString","JSON","stringify","String","Error","cons","element","l","elements","reverse","reduce","acc","item","head","car","tail","isEmpty","isEqual","list1","list2","has","iter","items","filter","func","newAcc","conj","set","disj","e","map","result","concat","length","seq","n","get","i","random","s","rec","p","first","rest"],"mappings":"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","file":"index.js","sourcesContent":["// @flow\n\nimport 'source-map-support/register';\n\nimport * as pairs from 'hexlet-pairs';\nimport { getRandomIntInclusive } from './utils';\n\ntype List = (...args: any) => any | null;\ntype SetOnPairs = (...args: any) => any | null;\n\n/**\n * Check if argument is list\n * @example\n * isList(l()); // true\n * isList(l('a', 5)); // true\n * isList(false); // false\n * isList('hello'); // false\n */\nexport const isList = (mix: any) => {\n  if (mix === null) {\n    return true;\n  }\n  if (pairs.isPair(mix)) {\n    return isList(pairs.cdr(mix));\n  }\n  return false;\n};\n\nexport const checkList = (list: ?List) => {\n  if (!isList(list)) {\n    let value;\n    if (pairs.isPair(list)) {\n      value = `pair: ${pairs.toString(list)}`;\n    } else if (typeof list === 'object') {\n      value = JSON.stringify(list, null, 2);\n    } else {\n      value = String(list);\n    }\n    throw new Error(`Argument must be list, but it was '${value}'`);\n  }\n};\n\n/**\n * Add element to list\n * @example\n * cons(5, l(1, 0)); // (5, 1, 0)\n */\nexport const cons = (element: any, list: List) => {\n  checkList(list);\n  return pairs.cons(element, list);\n};\n\n/**\n * List constructor\n * @name l\n * @example\n * l(); // ()\n * l(8, 10); // (8, 10)\n */\nexport const l = (...elements: any) =>\n  elements.reverse().reduce((acc, item) =>\n    cons(item, acc), null);\n\n/**\n * Get list's head\n * @example\n * head(l(10, 15, 20)); // 10\n */\nexport const head = (list: List) => {\n  checkList(list);\n  return pairs.car(list);\n};\n\n/**\n * Get list's tail\n * @example\n * tail(l(10, 15, 20)); // (15, 20)\n */\nexport const tail = (list: List) => {\n  checkList(list);\n  return pairs.cdr(list);\n};\n\n/**\n * Check if list is empty\n * @example\n * isEmpty(l()); // true\n * isEmpty(l(0)); // false\n * isEmpty(l('a', 5)); // false\n */\nexport const isEmpty = (list: List) => {\n  checkList(list);\n  return list === null;\n};\n\n/**\n * Compare 2 lists\n * @example\n * isEqual(l(), l()); // true\n * isEqual(l(), l(8, 3)); // false\n * isEqual(l(1, 2, 10), l(1, 2, 10)); // true\n */\nexport const isEqual = (list1: List, list2: List) => {\n  checkList(list1);\n  checkList(list2);\n  if (isEmpty(list1) && isEmpty(list2)) {\n    return true;\n  }\n  if (head(list1) !== head(list2)) {\n    return false;\n  }\n  return isEqual(tail(list1), tail(list2));\n};\n\n/**\n * Check if list has some element\n * @example\n * const numbers = l(3, 4, 5, 8);\n * has(numbers, 3); // true\n * has(numbers, 8); // true\n * has(numbers, 0); // false\n * has(numbers, 'wow'); // false\n */\nexport const has = (list: List, element: any) => {\n  checkList(list);\n  if (isEmpty(list)) {\n    return false;\n  }\n  if (head(list) === element) {\n    return true;\n  }\n  return has(tail(list), element);\n};\n\n/**\n * Reverse list\n * @example\n * reverse(l()); // ()\n * reverse(l(8, 2, 10)); // (10, 2, 8)\n */\nexport const reverse = (list: List) => {\n  checkList(list);\n  const iter = (items, acc) =>\n    (isEmpty(items) ? acc : iter(tail(items), cons(head(items), acc)));\n\n  return iter(list, l());\n};\n\n/**\n * Filter list\n * @example\n * const numbers = l(3, 4, 5, 8);\n * filter(n => n % 2 === 0, numbers); // (4, 8)\n */\nexport const filter = <U>(func: (value: U) => boolean, list: List<U>) => {\n  checkList(list);\n  const iter = (items, acc) => {\n    if (isEmpty(items)) {\n      return reverse(acc);\n    }\n    const item = head(items);\n    const newAcc = func(item) ? cons(item, acc) : acc;\n    return iter(tail(items), newAcc);\n  };\n\n  return iter(list, l());\n};\n\n/**\n * Conj\n */\nexport const conj = (set: SetOnPairs, element: any) =>\n  (has(set, element) ? set : cons(element, set));\n\n\n/**\n * Disj\n */\nexport const disj = (set: SetOnPairs, element: any) =>\n  filter(e => e !== element, set);\n\n/**\n * Map list\n * @example\n * const numbers = l(3, 4, 5, 8);\n * map(n => n + 2, numbers); // (5, 6, 7, 10)\n */\nexport const map = <U, T>(func: (value: T) => U, list: List<T>): List<U> => {\n  checkList(list);\n  const iter = (items, acc) => {\n    if (isEmpty(items)) {\n      return reverse(acc);\n    }\n    return iter(tail(items), cons(func(head(items)), acc));\n  };\n\n  return iter(list, l());\n};\n\n/**\n * Reduce list\n * @example\n * const numbers = l(3, 4, 5, 8);\n * reduce((n, acc) => acc + 1, 0, numbers); // 4\n */\nexport const reduce = (func, acc, list: List) => {\n  checkList(list);\n  const iter = (items, result) => (isEmpty(items) ?\n    result : iter(tail(items), func(head(items), result)));\n  return iter(list, acc);\n};\n\n/**\n * Join 2 lists\n * @example\n * const numbers = l(3, 4, 5, 8);\n * const numbers2 = l(3, 2, 9);\n * concat(numbers, numbers2); // (3, 4, 5, 8, 3, 2, 9)\n * concat(l(), l(1, 10)); (1, 10)\n * concat(l(1, 10), l()); // (1, 10)\n */\nexport const concat = (list1: List, list2: List) => {\n  checkList(list1);\n  checkList(list2);\n  if (isEmpty(list1)) {\n    return list2;\n  }\n  return cons(head(list1), concat(tail(list1), list2));\n};\n\n/**\n * List's length\n * @example\n * const numbers = l(3, 4, 5, 8);\n * data.length(numbers); // 4\n */\nexport const length = (seq: List) => {\n  checkList(seq);\n  return reduce((n, acc) => acc + 1, 0, seq);\n};\n\n/**\n * Get element from list by index\n * @example\n * const numbers = l(3, 4, 5, 8);\n * get(0, numbers); // 3\n * get(1, numbers); // 4\n * get(3, numbers); // 8\n */\nexport const get = (i: number, seq: List) => {\n  checkList(seq);\n  if (i === 0) {\n    return head(seq);\n  }\n\n  return get(i - 1, tail(seq));\n};\n\n/**\n * Get random element from list\n */\nexport const random = (seq: List) => {\n  checkList(seq);\n  const n = getRandomIntInclusive(0, length(seq) - 1);\n  return get(n, seq);\n};\n\n/**\n * Constructor for Set\n */\nexport const s = (...elements: any) =>\n  elements.reverse().reduce((acc, item) =>\n    (has(acc, item) ? acc : conj(acc, item)), l());\n/**\n * Convert list to string\n * @example\n * toString(l()); // ()\n * toString(l('hello', 'world')); // ('hello', 'world')\n */\nexport const toString = (list: List) => {\n  if (!isList(list)) {\n    if (pairs.isPair(list)) {\n      return `pair: ${pairs.toString(list)}`;\n    } else if (typeof list === 'object') {\n      return JSON.stringify(list, null, 2);\n    }\n    return list;\n  }\n\n  if (isEmpty(list)) {\n    return '()';\n  }\n\n  const rec = (p) => {\n    const first = head(p);\n    const rest = tail(p);\n    if (isEmpty(rest)) {\n      return toString(first);\n    }\n\n    return `${toString(first)}, ${rec(rest)}`;\n  };\n\n  return `(${rec(list)})`;\n};\n"]}