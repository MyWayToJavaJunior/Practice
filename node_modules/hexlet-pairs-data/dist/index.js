'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toString = exports.s = exports.random = exports.get = exports.length = exports.concat = exports.reduce = exports.map = exports.disj = exports.conj = exports.filter = exports.reverse = exports.has = exports.isEqual = exports.isEmpty = exports.tail = exports.head = exports.l = exports.cons = exports.checkList = exports.isList = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

require('source-map-support/register');

var _hexletPairs = require('hexlet-pairs');

var pairs = _interopRequireWildcard(_hexletPairs);

var _utils = require('./utils');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

/**
 * Check if argument is list
 * @example
 * isList(l()); // true
 * isList(l('a', 5)); // true
 * isList(false); // false
 * isList('hello'); // false
 */
var isList = exports.isList = function isList(mix) {
  if (mix === null) {
    return true;
  }
  if (pairs.isPair(mix)) {
    return isList(pairs.cdr(mix));
  }
  return false;
};

var checkList = exports.checkList = function checkList(list) {
  if (!isList(list)) {
    var _value = void 0;
    if (pairs.isPair(list)) {
      _value = 'pair: ' + pairs.toString(list);
    } else if ((typeof list === 'undefined' ? 'undefined' : _typeof(list)) === 'object') {
      _value = JSON.stringify(list, null, 2);
    } else {
      _value = String(list);
    }
    throw new Error('Argument must be list, but it was \'' + _value + '\'');
  }
};

/**
 * Add element to list
 * @example
 * cons(5, l(1, 0)); // (5, 1, 0)
 */
var cons = exports.cons = function cons(element, list) {
  checkList(list);
  return pairs.cons(element, list);
};

/**
 * List constructor
 * @name l
 * @example
 * l(); // ()
 * l(8, 10); // (8, 10)
 */
var l = exports.l = function l() {
  for (var _len = arguments.length, elements = Array(_len), _key = 0; _key < _len; _key++) {
    elements[_key] = arguments[_key];
  }

  return elements.reverse().reduce(function (acc, item) {
    return cons(item, acc);
  }, null);
};

/**
 * Get list's head
 * @example
 * head(l(10, 15, 20)); // 10
 */
var head = exports.head = function head(list) {
  checkList(list);
  return pairs.car(list);
};

/**
 * Get list's tail
 * @example
 * tail(l(10, 15, 20)); // (15, 20)
 */
var tail = exports.tail = function tail(list) {
  checkList(list);
  return pairs.cdr(list);
};

/**
 * Check if list is empty
 * @example
 * isEmpty(l()); // true
 * isEmpty(l(0)); // false
 * isEmpty(l('a', 5)); // false
 */
var isEmpty = exports.isEmpty = function isEmpty(list) {
  checkList(list);
  return list === null;
};

/**
 * Compare 2 lists
 * @example
 * isEqual(l(), l()); // true
 * isEqual(l(), l(8, 3)); // false
 * isEqual(l(1, 2, 10), l(1, 2, 10)); // true
 */
var isEqual = exports.isEqual = function isEqual(list1, list2) {
  checkList(list1);
  checkList(list2);
  if (isEmpty(list1) && isEmpty(list2)) {
    return true;
  }
  if (head(list1) !== head(list2)) {
    return false;
  }
  return isEqual(tail(list1), tail(list2));
};

/**
 * Check if list has some element
 * @example
 * const numbers = l(3, 4, 5, 8);
 * has(numbers, 3); // true
 * has(numbers, 8); // true
 * has(numbers, 0); // false
 * has(numbers, 'wow'); // false
 */
var has = exports.has = function has(list, element) {
  checkList(list);
  if (isEmpty(list)) {
    return false;
  }
  if (head(list) === element) {
    return true;
  }
  return has(tail(list), element);
};

/**
 * Reverse list
 * @example
 * reverse(l()); // ()
 * reverse(l(8, 2, 10)); // (10, 2, 8)
 */
var reverse = exports.reverse = function reverse(list) {
  checkList(list);
  var iter = function iter(items, acc) {
    return isEmpty(items) ? acc : iter(tail(items), cons(head(items), acc));
  };

  return iter(list, l());
};

/**
 * Filter list
 * @example
 * const numbers = l(3, 4, 5, 8);
 * filter(n => n % 2 === 0, numbers); // (4, 8)
 */
var filter = exports.filter = function filter(func, list) {
  checkList(list);
  var iter = function iter(items, acc) {
    if (isEmpty(items)) {
      return reverse(acc);
    }
    var item = head(items);
    var newAcc = func(item) ? cons(item, acc) : acc;
    return iter(tail(items), newAcc);
  };

  return iter(list, l());
};

/**
 * Conj
 */
var conj = exports.conj = function conj(set, element) {
  return has(set, element) ? set : cons(element, set);
};

/**
 * Disj
 */
var disj = exports.disj = function disj(set, element) {
  return filter(function (e) {
    return e !== element;
  }, set);
};

/**
 * Map list
 * @example
 * const numbers = l(3, 4, 5, 8);
 * map(n => n + 2, numbers); // (5, 6, 7, 10)
 */
var map = exports.map = function map(func, list) {
  checkList(list);
  var iter = function iter(items, acc) {
    if (isEmpty(items)) {
      return reverse(acc);
    }
    return iter(tail(items), cons(func(head(items)), acc));
  };

  return iter(list, l());
};

/**
 * Reduce list
 * @example
 * const numbers = l(3, 4, 5, 8);
 * reduce((n, acc) => acc + 1, 0, numbers); // 4
 */
var reduce = exports.reduce = function reduce(func, acc, list) {
  checkList(list);
  var iter = function iter(items, result) {
    return isEmpty(items) ? result : iter(tail(items), func(head(items), result));
  };
  return iter(list, acc);
};

/**
 * Join 2 lists
 * @example
 * const numbers = l(3, 4, 5, 8);
 * const numbers2 = l(3, 2, 9);
 * concat(numbers, numbers2); // (3, 4, 5, 8, 3, 2, 9)
 * concat(l(), l(1, 10)); (1, 10)
 * concat(l(1, 10), l()); // (1, 10)
 */
var concat = exports.concat = function concat(list1, list2) {
  checkList(list1);
  checkList(list2);
  if (isEmpty(list1)) {
    return list2;
  }
  return cons(head(list1), concat(tail(list1), list2));
};

/**
 * List's length
 * @example
 * const numbers = l(3, 4, 5, 8);
 * data.length(numbers); // 4
 */
var length = exports.length = function length(seq) {
  checkList(seq);
  return reduce(function (n, acc) {
    return acc + 1;
  }, 0, seq);
};

/**
 * Get element from list by index
 * @example
 * const numbers = l(3, 4, 5, 8);
 * get(0, numbers); // 3
 * get(1, numbers); // 4
 * get(3, numbers); // 8
 */
var get = exports.get = function get(i, seq) {
  checkList(seq);
  if (i === 0) {
    return head(seq);
  }

  return get(i - 1, tail(seq));
};

/**
 * Get random element from list
 */
var random = exports.random = function random(seq) {
  checkList(seq);
  var n = (0, _utils.getRandomIntInclusive)(0, length(seq) - 1);
  return get(n, seq);
};

/**
 * Constructor for Set
 */
var s = exports.s = function s() {
  for (var _len2 = arguments.length, elements = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    elements[_key2] = arguments[_key2];
  }

  return elements.reverse().reduce(function (acc, item) {
    return has(acc, item) ? acc : conj(acc, item);
  }, l());
};
/**
 * Convert list to string
 * @example
 * toString(l()); // ()
 * toString(l('hello', 'world')); // ('hello', 'world')
 */
var toString = exports.toString = function toString(list) {
  if (!isList(list)) {
    if (pairs.isPair(list)) {
      return 'pair: ' + pairs.toString(list);
    } else if ((typeof list === 'undefined' ? 'undefined' : _typeof(list)) === 'object') {
      return JSON.stringify(list, null, 2);
    }
    return list;
  }

  if (isEmpty(list)) {
    return '()';
  }

  var rec = function rec(p) {
    var first = head(p);
    var rest = tail(p);
    if (isEmpty(rest)) {
      return toString(first);
    }

    return toString(first) + ', ' + rec(rest);
  };

  return '(' + rec(list) + ')';
};
//# sourceMappingURL=index.js.map