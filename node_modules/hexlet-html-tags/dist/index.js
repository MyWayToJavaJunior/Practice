'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reduce = exports.filter = exports.map = exports.toString = exports.addChild = exports.children = exports.hasChildren = exports.is = exports.value = exports.name = exports.node = exports.append = exports.make = undefined;

var _hexletPairs = require('hexlet-pairs');

var _hexletPairsData = require('hexlet-pairs-data');

var data = _interopRequireWildcard(_hexletPairsData);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var make = exports.make = function make() {
  return data.l();
};
var append = exports.append = function append(dom, element) {
  return data.cons(element, dom);
};

var node = exports.node = function node(tag) {
  var mix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : data.l();
  return (0, _hexletPairs.cons)(tag, mix);
};

var name = exports.name = function name(element) {
  return (0, _hexletPairs.car)(element);
};
var value = exports.value = function value(element) {
  return (0, _hexletPairs.cdr)(element);
};
var is = exports.is = function is(tag, element) {
  return tag === name(element);
};

var hasChildren = exports.hasChildren = function hasChildren(element) {
  return (0, _hexletPairs.isPair)((0, _hexletPairs.cdr)(element));
};
var children = exports.children = function children(element) {
  return (0, _hexletPairs.cdr)(element);
};
var addChild = exports.addChild = function addChild(element, child) {
  return data.cons(name(element), data.cons(child, children(element)));
};

var toString = exports.toString = function toString(elements) {
  if (data.isEmpty(elements)) {
    return '';
  }
  var element = data.head(elements);
  var tag = name(element);
  var body = hasChildren(element) ? toString(children(element)) : value(element);
  return toString(data.tail(elements)) + '<' + tag + '>' + body + '</' + tag + '>';
};

var map = exports.map = function map(func, elements) {
  return data.map(func, elements);
};
var filter = exports.filter = function filter(func, elements) {
  return data.filter(func, elements);
};
var reduce = exports.reduce = function reduce(func, init, elements) {
  return data.reduce(func, init, elements);
};