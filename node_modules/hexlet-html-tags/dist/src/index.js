'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reduce = exports.filter = exports.map = exports.toString = exports.addChild = exports.children = exports.hasChildren = exports.is = exports.value = exports.name = exports.node = exports.append = exports.make = undefined;

require('source-map-support/register');

var _hexletPairs = require('hexlet-pairs');

var _hexletPairsData = require('hexlet-pairs-data');

var data = _interopRequireWildcard(_hexletPairsData);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

/**
 * Make a list of nodes
 * @example
 * make(node('span', 'hello'), node('span', 'world'));
 */
var make = exports.make = function make() {
  return data.l();
};

/**
 * Append node to a list of nodes
 * @example
 * const dom = make();
 * append(dom, node('h2', 'hello, world'));
 *
 */


var append = exports.append = function append(dom, element) {
  return data.cons(element, dom);
};

/**
 * Make a node
 * @example
 * node('h2', 'hello, world');
 * node('div', l(node('p', 'one'), node('p', 'two')));
 */
var node = exports.node = function node(tag) {
  var mix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : data.l();
  return (0, _hexletPairs.cons)(tag, mix);
};

/**
 * Get node's name
 * @example
 * name(node('p', 'hello, world')); // p
 */
var name = exports.name = function name(element) {
  return (0, _hexletPairs.car)(element);
};

/**
 * Get node's value
 * @example
 * value(node('p', 'hello, world')); // hello, world
 */
var value = exports.value = function value(element) {
  return (0, _hexletPairs.cdr)(element);
};

/**
 * Check if node is tag
 * @example
 * is('h3', node('h3', 'hexlet')); // true
 * is('h3', node('h6', 'hexlet')); // false
 */
var is = exports.is = function is(tagName, element) {
  return tagName === name(element);
};

/**
 * Check if node has children
 * @example
 * hasChildren(node('h3', 'hexlet')); // false
 * hasChildren(node('div', l(node('p', 'wow')))); // true
 */
var hasChildren = exports.hasChildren = function hasChildren(element) {
  return (0, _hexletPairs.isPair)((0, _hexletPairs.cdr)(element));
};

/**
 * Get node's children
 * @example
 * const children = l(node('p', 'wow'), node('p', 'hey');
 * children(node('div', children)); // [('p', 'wow'), ('p', 'hey')]
 */
var children = exports.children = function children(element) {
  return (0, _hexletPairs.cdr)(element);
};

/**
 * Add child to node
 * @example
 * const node = node('div');
 * addChild(node, node('p', 'html tags'));
 */
var addChild = exports.addChild = function addChild(element, child) {
  return data.cons(name(element), data.cons(child, children(element)));
};

/**
 * Convert list of nodes to string
 * @example
 * const tags = make(node('p', 'text'), node('p', 'text2'));
 * toString(tags); // <p>text</p><p>text2</p>
 */
var toString = exports.toString = function toString(elements) {
  if (data.isEmpty(elements)) {
    return '';
  }
  var element = data.head(elements);
  var tag = name(element);
  var body = hasChildren(element) ? toString(children(element)) : value(element);
  return toString(data.tail(elements)) + '<' + tag + '>' + body + '</' + tag + '>';
};

/**
 * Map a list of nodes
 * @example
 * map(element => {
 *   if (is('h2', element)) {
 *     return node('h3', value(element));
 *   }
 *   return element;
 * }, dom);
 */
var map = exports.map = function map(func, elements) {
  return data.map(func, elements);
};

/**
 * Filter a list of nodes
 * @example
 * filter(element => is('h2', element), dom);
 */
var filter = exports.filter = function filter(func, elements) {
  return data.filter(func, elements);
};

/**
 * Reduce a list of nodes
 * @example
 * reduce((element, acc) => acc + 1, 0, dom);
 */
var reduce = exports.reduce = function reduce(func, init, elements) {
  return data.reduce(func, init, elements);
};
//# sourceMappingURL=index.js.map