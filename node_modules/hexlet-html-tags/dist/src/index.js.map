{"version":3,"sources":["../../src/index.js"],"names":["data","make","l","append","dom","element","cons","node","tag","mix","name","value","is","tagName","hasChildren","children","addChild","child","toString","elements","isEmpty","head","body","tail","map","func","filter","reduce","init"],"mappings":";;;;;;;AAEA;;AAEA;;AACA;;IAAYA,I;;;;AAEZ;;;;;AAKO,IAAMC,sBAAO,SAAPA,IAAO;AAAA,SAAMD,KAAKE,CAAL,EAAN;AAAA,CAAb;;AAEP;;;;;;;;;AAOO,IAAMC,0BAAS,SAATA,MAAS,CAACC,GAAD,EAAMC,OAAN;AAAA,SAAkBL,KAAKM,IAAL,CAAUD,OAAV,EAAmBD,GAAnB,CAAlB;AAAA,CAAf;;AAEP;;;;;;AAMO,IAAMG,sBAAO,SAAPA,IAAO,CAACC,GAAD;AAAA,MAAMC,GAAN,uEAAYT,KAAKE,CAAL,EAAZ;AAAA,SAAyB,uBAAKM,GAAL,EAAUC,GAAV,CAAzB;AAAA,CAAb;;AAEP;;;;;AAKO,IAAMC,sBAAO,SAAPA,IAAO;AAAA,SAAW,sBAAIL,OAAJ,CAAX;AAAA,CAAb;;AAEP;;;;;AAKO,IAAMM,wBAAQ,SAARA,KAAQ;AAAA,SAAW,sBAAIN,OAAJ,CAAX;AAAA,CAAd;;AAEP;;;;;;AAMO,IAAMO,kBAAK,SAALA,EAAK,CAACC,OAAD,EAAkBR,OAAlB;AAAA,SAA8BQ,YAAYH,KAAKL,OAAL,CAA1C;AAAA,CAAX;;AAEP;;;;;;AAMO,IAAMS,oCAAc,SAAdA,WAAc;AAAA,SAAW,yBAAO,sBAAIT,OAAJ,CAAP,CAAX;AAAA,CAApB;;AAEP;;;;;;AAMO,IAAMU,8BAAW,SAAXA,QAAW;AAAA,SAAW,sBAAIV,OAAJ,CAAX;AAAA,CAAjB;;AAEP;;;;;;AAMO,IAAMW,8BAAW,SAAXA,QAAW,CAACX,OAAD,EAAUY,KAAV;AAAA,SACtBjB,KAAKM,IAAL,CAAUI,KAAKL,OAAL,CAAV,EAAyBL,KAAKM,IAAL,CAAUW,KAAV,EAAiBF,SAASV,OAAT,CAAjB,CAAzB,CADsB;AAAA,CAAjB;;AAGP;;;;;;AAMO,IAAMa,8BAAW,SAAXA,QAAW,CAACC,QAAD,EAAc;AACpC,MAAInB,KAAKoB,OAAL,CAAaD,QAAb,CAAJ,EAA4B;AAC1B,WAAO,EAAP;AACD;AACD,MAAMd,UAAUL,KAAKqB,IAAL,CAAUF,QAAV,CAAhB;AACA,MAAMX,MAAME,KAAKL,OAAL,CAAZ;AACA,MAAMiB,OAAOR,YAAYT,OAAZ,IAAuBa,SAASH,SAASV,OAAT,CAAT,CAAvB,GAAqDM,MAAMN,OAAN,CAAlE;AACA,SAAUa,SAASlB,KAAKuB,IAAL,CAAUJ,QAAV,CAAT,CAAV,SAA2CX,GAA3C,SAAkDc,IAAlD,UAA2Dd,GAA3D;AACD,CARM;;AAUP;;;;;;;;;;AAUO,IAAMgB,oBAAM,SAANA,GAAM,CAACC,IAAD,EAAON,QAAP;AAAA,SAAoBnB,KAAKwB,GAAL,CAASC,IAAT,EAAeN,QAAf,CAApB;AAAA,CAAZ;;AAEP;;;;;AAKO,IAAMO,0BAAS,SAATA,MAAS,CAACD,IAAD,EAAON,QAAP;AAAA,SAAoBnB,KAAK0B,MAAL,CAAYD,IAAZ,EAAkBN,QAAlB,CAApB;AAAA,CAAf;;AAEP;;;;;AAKO,IAAMQ,0BAAS,SAATA,MAAS,CAACF,IAAD,EAAOG,IAAP,EAAaT,QAAb;AAAA,SAA0BnB,KAAK2B,MAAL,CAAYF,IAAZ,EAAkBG,IAAlB,EAAwBT,QAAxB,CAA1B;AAAA,CAAf","file":"index.js","sourcesContent":["// @flow\n\nimport 'source-map-support/register';\n\nimport { isPair, car, cdr, cons } from 'hexlet-pairs';\nimport * as data from 'hexlet-pairs-data';\n\n/**\n * Make a list of nodes\n * @example\n * make(node('span', 'hello'), node('span', 'world'));\n */\nexport const make = () => data.l();\n\n/**\n * Append node to a list of nodes\n * @example\n * const dom = make();\n * append(dom, node('h2', 'hello, world'));\n *\n */\nexport const append = (dom, element) => data.cons(element, dom);\n\n/**\n * Make a node\n * @example\n * node('h2', 'hello, world');\n * node('div', l(node('p', 'one'), node('p', 'two')));\n */\nexport const node = (tag, mix = data.l()) => cons(tag, mix);\n\n/**\n * Get node's name\n * @example\n * name(node('p', 'hello, world')); // p\n */\nexport const name = element => car(element);\n\n/**\n * Get node's value\n * @example\n * value(node('p', 'hello, world')); // hello, world\n */\nexport const value = element => cdr(element);\n\n/**\n * Check if node is tag\n * @example\n * is('h3', node('h3', 'hexlet')); // true\n * is('h3', node('h6', 'hexlet')); // false\n */\nexport const is = (tagName: string, element) => tagName === name(element);\n\n/**\n * Check if node has children\n * @example\n * hasChildren(node('h3', 'hexlet')); // false\n * hasChildren(node('div', l(node('p', 'wow')))); // true\n */\nexport const hasChildren = element => isPair(cdr(element));\n\n/**\n * Get node's children\n * @example\n * const children = l(node('p', 'wow'), node('p', 'hey');\n * children(node('div', children)); // [('p', 'wow'), ('p', 'hey')]\n */\nexport const children = element => cdr(element);\n\n/**\n * Add child to node\n * @example\n * const node = node('div');\n * addChild(node, node('p', 'html tags'));\n */\nexport const addChild = (element, child) =>\n  data.cons(name(element), data.cons(child, children(element)));\n\n/**\n * Convert list of nodes to string\n * @example\n * const tags = make(node('p', 'text'), node('p', 'text2'));\n * toString(tags); // <p>text</p><p>text2</p>\n */\nexport const toString = (elements) => {\n  if (data.isEmpty(elements)) {\n    return '';\n  }\n  const element = data.head(elements);\n  const tag = name(element);\n  const body = hasChildren(element) ? toString(children(element)) : value(element);\n  return `${toString(data.tail(elements))}<${tag}>${body}</${tag}>`;\n};\n\n/**\n * Map a list of nodes\n * @example\n * map(element => {\n *   if (is('h2', element)) {\n *     return node('h3', value(element));\n *   }\n *   return element;\n * }, dom);\n */\nexport const map = (func, elements) => data.map(func, elements);\n\n/**\n * Filter a list of nodes\n * @example\n * filter(element => is('h2', element), dom);\n */\nexport const filter = (func, elements) => data.filter(func, elements);\n\n/**\n * Reduce a list of nodes\n * @example\n * reduce((element, acc) => acc + 1, 0, dom);\n */\nexport const reduce = (func, init, elements) => data.reduce(func, init, elements);\n"]}