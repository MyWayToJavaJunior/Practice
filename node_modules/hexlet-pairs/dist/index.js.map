{"version":3,"sources":["../src/index.js"],"names":[],"mappings":";;;;;;;;;AAEA;;AAMA;;;;;;;AAOO,IAAM,0BAAS,SAAT,MAAS,CAAC,IAAD;AAAA,SAA0B,OAAO,IAAP,KAAgB,UAAhB,IAA8B,KAAK,IAA7D;AAAA,CAAf;;AAEA,IAAM,gCAAY,SAAZ,SAAY,CAAC,IAAD,EAAuB;AAC9C,MAAI,CAAC,OAAO,IAAP,CAAL,EAAmB;AACjB,QAAM,QAAQ,QAAO,IAAP,yCAAO,IAAP,OAAgB,QAAhB,GAA2B,KAAK,SAAL,CAAe,IAAf,EAAqB,IAArB,EAA2B,CAA3B,CAA3B,GAA2D,OAAO,IAAP,CAAzE;AACA,UAAM,IAAI,KAAJ,0CAAgD,KAAhD,QAAN;AACD;AACF,CALM;;AAOP;;;;;;;AAOO,IAAM,sBAAO,SAAP,IAAO,CAAC,CAAD,EAAS,CAAT,EAA0B;AAC5C,MAAM,OAAO,SAAP,IAAO,CAAC,OAAD,EAAsB;AACjC,YAAQ,OAAR;AACE,WAAK,KAAL;AACE,eAAO,CAAP;AACF,WAAK,KAAL;AACE,eAAO,CAAP;AACF;AACE,cAAM,IAAI,KAAJ,wBAA8B,OAA9B,QAAN;AANJ;AAQD,GATD;AAUA,OAAK,IAAL,GAAY,IAAZ;AACA,SAAO,IAAP;AACD,CAbM;;AAeP;;;;;;AAMO,IAAM,oBAAM,SAAN,GAAM,CAAC,IAAD,EAAqB;AACtC,YAAU,IAAV;AACA,SAAO,KAAK,KAAL,CAAP;AACD,CAHM;;AAKP;;;;;;AAMO,IAAM,oBAAM,SAAN,GAAM,CAAC,IAAD,EAAqB;AACtC,YAAU,IAAV;AACA,SAAO,KAAK,KAAL,CAAP;AACD,CAHM;;AAKP;;;;;AAKO,IAAM,8BAAW,SAAX,QAAW,CAAC,IAAD,EAAwB;AAC9C,YAAU,IAAV;AACA,MAAM,MAAM,SAAN,GAAM,CAAC,CAAD,EAAO;AACjB,QAAI,CAAC,OAAO,CAAP,CAAL,EAAgB;AACd,aAAO,OAAO,CAAP,CAAP;AACD;AACD,QAAM,OAAO,IAAI,CAAJ,CAAb;AACA,QAAM,QAAQ,IAAI,CAAJ,CAAd;AACA,iBAAW,IAAI,IAAJ,CAAX,UAAyB,IAAI,KAAJ,CAAzB;AACD,GAPD;;AASA,SAAO,IAAI,IAAJ,CAAP;AACD,CAZM","file":"index.js","sourcesContent":["// @flow\n\nimport 'source-map-support/register';\n\ntype Message = 'car' | 'cdr';\n\ntype Pair = (message: Message) => any;\n\n/**\n * Check if something is pair\n * @example\n * const pair = cons(5, 'hello');\n * isPair(pair); // true\n * isPair(5); // false\n */\nexport const isPair = (pair: ?Pair): boolean => typeof pair === 'function' && pair.pair;\n\nexport const checkPair = (pair: ?Pair): void => {\n  if (!isPair(pair)) {\n    const value = typeof pair === 'object' ? JSON.stringify(pair, null, 2) : String(pair);\n    throw new Error(`Argument must be pair, but it was '${value}'`);\n  }\n};\n\n/**\n * Build pair\n * @example\n * const pair = cons(5, 'hello');\n * @example\n * const pair = cons(cons(1, null), 'world');\n */\nexport const cons = (a: any, b: any): Pair => {\n  const pair = (message: Message) => {\n    switch (message) {\n      case 'car':\n        return a;\n      case 'cdr':\n        return b;\n      default:\n        throw new Error(`Unknown message '${message}'`);\n    }\n  };\n  pair.pair = true;\n  return pair;\n};\n\n/**\n * Get car (first element) from pair\n * @example\n * const pair = cons(5, 'hello');\n * car(pair); // 5\n */\nexport const car = (pair: Pair): any => {\n  checkPair(pair);\n  return pair('car');\n};\n\n/**\n * Get cdr (second element) from pair\n * @example\n * const pair = cons(5, 'hello');\n * cdr(pair); // hello\n */\nexport const cdr = (pair: Pair): any => {\n  checkPair(pair);\n  return pair('cdr');\n};\n\n/**\n * Convert pair to string (recursively)\n * @example\n * toString(cons('', 10)); // ('', 10)\n */\nexport const toString = (pair: Pair): string => {\n  checkPair(pair);\n  const rec = (p) => {\n    if (!isPair(p)) {\n      return String(p);\n    }\n    const left = car(p);\n    const right = cdr(p);\n    return `(${rec(left)}, ${rec(right)})`;\n  };\n\n  return rec(pair);\n};\n"]}